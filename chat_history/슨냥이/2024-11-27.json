[
  {
    "question": "range와 xrange 의  차이점은  무엇인가요 ?",
    "answer": "파이썬2에서는 range와 xrange 모두 존재하지만, 파이썬3부터는\nrange가 내부적으로 xrange로 동작하도록 바뀌어서 range만 존재한\n다. 그러므로 파이썬2를 기준으로 range와 xrange를 설명한다.",
    "feedback": "1. 답변의 좋은 점:\n지원자는 range와 xrange의 차이를 파이썬 2를 기준으로 설명하고 있습니다. 또한, range와 xrange가 파이썬 3부터는 range로 통합되었다는 점을 언급하고 있습니다.\n\n2. 보완이 필요한 점:\n지원자의 답변은 기술적인 면에서는 정확하나, 좀 더 구체적인 설명이 필요합니다. 또한, 파이썬 3부터 range가 xrange로 통합되었다는 부분을 더 자세히 설명할 필요가 있습니다.\n\n3. 추가로 언급하면 좋을 내용:\nrange와 xrange의 주요 차이점은 range는 리스트를 반환하는 반면, xrange는 제너레이터 객체로 값을 반환한다는 점입니다. 또한, xrange는 메모리를 효율적으로 사용할 수 있어 큰 범위의 숫자를 다룰 때 유용합니다.\n\n4. 개선된 답변 예시:\n\"range와 xrange의 주요 차이점은 range는 리스트를 반환하고 xrange는 제너레이터 객체로 값을 반환한다는 점입니다. 파이썬 3부터는 range가 xrange로 통합되어 range만 존재하게 되었습니다. range는 입력으로 받은 정수 범위의 값을 요소로 하는 리스트를 반환하며, xrange는 루프를 돌 때만 해당 범위의 정수를 하나씩 반환합니다.\"\n\n핵심 키워드: range, xrange, 리스트 반환, 제너레이터 객체, 파이썬 2, 파이썬 3",
    "context": "Py thon 관 련  면 접  Q&A\n13\n특정  범위  내의  n 개의  정수를  생성하고  싶은  경우\nCopy\nn = 5\nlst = range(1, 101)\nprint(random.sample(lst, 5))    # [70, 36, 32, 82, 5]\n` range 와  xrange 의  차이점은  무엇인가요 ?` \n파이썬 2 에서는  range 와  xrange 모두  존재하지만 , 파이썬 3 부터는 \nrange 가  내부적으로  xrange 로  동작하도록  바뀌어서  range 만  존재한\n다 . 그러므로  파이썬 2 를  기준으로  range 와  xrange 를  설명한다 .\nrange 객체는  입력으로  받은  정수  범위의  값을  요소로  같는  리스트를  말한다 . 그러므로 \nrange(3) 과  [0, 1, 2] 는  완전히  동일하다 .\nCopy\n# python2\nr = range(5)\nprint(r)            # [0, 1, 2, 3, 4]\nprint(type(r))      # <type 'list'>\nxrange 는  제너레이터  객체로 , 오직  루프를  돌때만  해당  범위의  정수를  하나씩  반환한다 . \nCopy\n#python2\nr = xrange(5)\nprint(r)            # xrange(5)\nprint(type(r))      # <type 'xrange'>\nfor i in r:\n    print i,\n# >> 0 1 2 3 4\n` python 에서  주석은  어떻게  작성하나요 ?`"
  },
  {
    "question": "파이썬 배열에  값을  추가하는  방법은  무엇인가요 ?",
    "answer": "append(), extend(), insert() 함수를 사용하여 list에 value를 추가할 수 있다.",
    "feedback": "1. 답변의 좋은 점:\n- 지원자가 append(), extend(), insert() 함수를 활용하여 값을 추가할 수 있다는 것을 언급했다.\n\n2. 보완이 필요한 점:\n- 답변이 너무 간략하고 표면적이며, 구체적인 설명이 부족하다.\n- 각 함수의 사용 방법이나 시간복잡도 등에 대한 설명이 없다.\n\n3. 추가로 언급하면 좋을 내용:\n- append(): 리스트의 끝에 요소를 추가하는 함수로, 시간복잡도는 O(1)이며 객체로 추가된다.\n- extend(): 리스트의 끝에 iterable한 객체의 모든 요소를 추가하는 함수이다.\n- insert(): 특정 위치에 요소를 추가하는 함수로, 시간복잡도는 O(n)이다.\n\n4. 개선된 답변 예시:\n파이썬 배열에 값을 추가하는 방법은 다양한 함수를 사용할 수 있습니다. \n- append() 함수는 리스트의 끝에 요소를 추가하는데 사용되며, 시간복잡도는 O(1)입니다. \n- extend() 함수는 iterable한 객체의 모든 요소를 리스트에 추가합니다. \n- insert() 함수는 특정 위치에 요소를 추가하는데 사용되며, 시간복잡도는 O(n)입니다.\n\n핵심 키워드: append(), extend(), insert(), 시간복잡도",
    "context": "Py thon 관 련  면 접  Q&A\n2 4\nPython 의  Built-in type 은  아래와  같다 .\nInteger\nFloating-point\nComplex number\nString\nBoolean\nBuilt-in function\n💡  빌트인 built-in 이란 ?\n어떤  기능이나  함수  등이  내장  또는  빌트인되어  있다는  뜻은  그것이  프\n로그램에서  바로  사용가능하도록  준비되어  있다는  뜻이다 . 자세한  내용\n은  basic-terminology-in-programming - shoark7 참고할  것 .\n` NumPy 배열은  ( 중첩된 ) 파이썬  리스트에  비해  어떤  이점이  있나요 ?`\nnumpy array 는  하나의  데이터  타입만  정의가  가능하다 . Python list 와  달리  다이나믹  타이\n핑을  지원하지  않으며 , C 의  Array 를  사용하여  배열을  생성하기  때문에  속도가  빠르다 .\nPython list 는  데이터  주소값을  저장하고  데이터를  가져올  때는  해당  주소에  가서  데이터를 \n가져온다 . 반면  Numpy array 는  C 의  배열과  유사하여  연속된  주소를  가지고  있어  데이터를 \n가져올  때는  순서대로  가져오면  되기  때문에  메모리를  효율적으로  사용한다 .\n` 파이썬  배열에  값을  추가하는  방법은  무엇인가요 ?`\nappend(), extend(), insert() 함수를  사용하여  list 에  value 를  추가할  수  있다 .\nappend()\nlist.append(x) 형태로  사용하며 , $O1$ 의  시간복잡도를  갖는다 . 괄호  안에  값을  입력하면 \n새로운  요소를  list 맨  끝에  추가한다 . 요소를  추가할  때는  객체로  추가하게  되는데 , 입력한 \n값이  리스트와  같은  반복  가능한  iterable 자료형이더라도  객체로  저장한다 .\nCopy\nnums = [1, 2, 3]"
  },
  {
    "question": "파이썬에서  메모리는  어떻게  관리되나요 ?",
    "answer": ""
  },
  {
    "question": "파이썬에서  메모리는  어떻게  관리되나요 ?",
    "answer": "Python은 모든 것을 객체로 관리한다. 객체가 더이상 필요하지 않으면 파이썬 메모리 관리\n자가 자동으로 객체에서 메모리를 회수하는 방식을 사용하므로, 파이썬은 동적 메모리 할당\n방식을 사용한다고 말할 수 있다. 힙(heap)은 동적할당을 구현하는데 사용된다.",
    "feedback": "1. 답변의 좋은 점:\n지원자는 Python이 객체로 모든 것을 관리하고, 더 이상 필요하지 않은 객체는 자동으로 메모리를 회수하는 방식을 사용한다는 점을 잘 설명했습니다. 또한, 힙(heap)이 동적할당을 구현하는 데 사용된다는 것을 언급하여 메모리 할당 방식을 설명했습니다.\n\n2. 보완이 필요한 점:\n더 구체적으로 Python의 메모리 관리 방식에 대해 설명할 수 있었으면 좋겠습니다. 예를 들어, 가비지 컬렉션(Garbage Collection)에 대한 이해나 메모리 누수(Memory Leak) 방지를 위한 Python의 기능에 대해 언급할 수 있을 것입니다.\n\n3. 추가로 언급하면 좋을 내용:\nPython의 메모리 관리는 참조 카운트(Reference Counting)와 가비지 컬렉션을 통해 이루어진다는 점을 언급하면 좋을 것입니다. 또한, 메모리 관리를 최적화하기 위해 weak reference나 메모리 프로파일링과 같은 도구를 사용하는 방법에 대해 언급할 수 있습니다.\n\n4. 개선된 답변 예시:\nPython은 객체로 모든 것을 관리합니다. 객체가 더 이상 필요하지 않으면 Python 메모리 관리자가 자동으로 메모리를 회수하는 방식을 사용합니다. 이를 통해 Python은 동적 메모리 할당 방식을 사용하고 있습니다. 또한, 메모리 할당은 힙(heap)을 통해 이루어집니다. Python의 메모리 관리는 참조 카운트(Reference Counting)와 가비지 컬렉션(Garbage Collection)을 통해 이루어지며, 메모리 누수(Memory Leak) 방지를 위해 주의해야 합니다.\n\n핵심 키워드: 객체, 메모리 관리, 동적 메모리 할당, 힙(heap), 참조 카운트, 가비지 컬렉션, 메모리 누수",
    "context": "Py thon 관 련  면 접  Q&A\n18\n` Python 이  종료될  때마다  모든  메모리가  할당  해제되지  않는  이유는  무엇인\n가요 ?`\n다른  객체나  전역  네임스페이스에서  참조되는  객체를  순환  참조하는  파이썬  모듈은  항상  해\n제되지는  않는다 . 또한  C 라이브러리가  예약한  메모리의  해당  부분을  해제하는  것은  불가능\n하다 . 그러므로  파이썬  종료  시 , 모든  메모리가  해제되지는  않는다 .\n💡  순환  참조 (Circular Reference)\n두  객체가  서로  참조하는  경우를  말한다 .\n💡  전역  네임스페이스 (Global Namespace)\n네임스페이스 (namespace) 란  프로그래밍  언어에서  특정  객체를  이름\n에  따라  구분할  수  있는  범위를  의미한다 . 전역  네임스페이스는  import\n한  모듈들의  이름을  포함하며 , 스크립트가  끝날  때까지  지속된다 .\n` Python 에서  dictionary 는  무엇인가요 ?`\n딕셔너리는  key 값과  그에  대응하는  value 값을  얻을  수  있는  컬렉션을  말한다 . 딕셔너리는 \n데이터가  들어온  순서가  상관이  없고 , 인덱싱이  되어  있어  key 값으로  요소에  접근하여  데이\n터 (= value) 수정이  가능하다 . 하지만 , key 값은  고유  값이므로  key 값  중복은  불가능하다 . \n주로  자체적으로  만든  key 값으로  데이터에  접근하고  싶을  때  딕셔너리  컬렉션을  사용한다 .\n딕셔너리의  뜻은  사전이다 . 영한  사전에서  각  영단어 (ex. beautiful) 에  대응하는  단어 (ex. \n아름다운 ) 가  나오는  것처럼 , 영단어가  key 값이고  그에  대응하는  단어를  value 값으로  볼  수 \n있다 .\n특징 1 : 딕셔너리는  {, } 를  사용하여  선언하며  { key1  value1, key2 "
  }
]
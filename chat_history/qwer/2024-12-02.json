[
  {
    "question": "딥러닝은  무엇인가요 ? 딥러닝과  머신러닝의  차이는  무엇이나요 ?",
    "answer": "qqqq",
    "feedback": "1. 답변의 좋은 점:\n- 지원자가 딥러닝과 머신러닝의 개념을 일정 부분 이해하고 있다는 점\n- 딥러닝이 머신러닝의 한 종류라는 개념을 언급한 것\n\n2. 보완이 필요한 점:\n- 답변이 너무 짧고 구체적인 내용이 부족함\n- 딥러닝과 머신러닝의 차이를 더 자세히 설명할 필요가 있음\n- 예시나 경험을 통해 답변을 더 강화할 필요가 있음\n\n3. 추가로 언급하면 좋을 내용:\n- 딥러닝과 머신러닝의 차이를 예시를 들어 설명하면 이해가 더 쉬울 수 있음\n- 자동으로 특징을 추출하는 딥러닝과 사람이 직접 특징을 선택하는 머신러닝의 차이를 강조\n- 딥러닝이 어떻게 현업에서 활용되는지에 대한 예시를 들어 설명하면 좋을 것\n\n4. 개선된 답변 예시:\n딥러닝은 여러 층을 가진 인공신경망을 사용하여 머신러닝 학습을 수행하는 것으로, 심층학습이라고도 부릅니다. 딥러닝은 머신러닝의 한 종류로, 머신러닝과의 차이는 주로 기계의 자가 학습 여부에 있습니다. 머신러닝에서는 사람이 특징을 직접 선택해야 했지만, 딥러닝에서는 기계가 자동으로 데이터에서 특징을 추출하여 학습합니다. 예를 들어, 머신러닝은 특정 이미지에서 사람이 얼굴을 인식할 때 어떤 특징을 사용할지 결정해야 하지만, 딥러닝은 이미지에서 눈, 코, 입 등의 특징을 자동으로 학습하여 얼굴을 인식할 수 있습니다. 딥러닝은 음성인식, 이미지 분류, 자율주행 등 다양한 분야에서 활용되고 있습니다.\n\n핵심 키워드: 딥러닝, 머신러닝, 인공신경망, 자동 특징 추출, 음성인식, 이미지 분류, 자율주행",
    "context": "DL 복제\n` 딥러닝은  무엇인가요 ? 딥러닝과  머신러닝의  차이는  무엇이나요 ?`\n## 답변  -type: answer\nA: 딥러닝이란  여러  층을  가진  인공신경망 (Artificial Neural Network, ANN) 을  사용하\n여  머신러닝  학습을  수행하는  것으로 , 심층학습이라고도  부른다 .\n딥러닝은  엄밀히  말하자면  머신러닝에  포함되는  개념이다 . 따라서  전통적인  머신러닝\n기법과  딥러닝  기법의  차이를  설명하고자  한다 .\n추가  설명\n딥러닝 (Deep Learning) 추가  설명\n딥러닝 (Deep Learning) 이란  여러  층을  가진  인공신경망 (Artificial Neural Network,\nANN) 을  사용하여  머신러닝  학습을  수행하는  것으로  심층학습이라고도  부릅니다 . 따\n라서  딥러닝은  머신러닝과  전혀  다른  개념이  아니라  머신러닝의  한  종류라고  할  수  있\n습니다 .\n기존의  머신러닝에서는  학습하려는  데이터의  여러  특징  중에서  어떤  특징을  추출할지\n를  사람이  직접  분석하고  판단해야만  했습니다 .\n하지만  딥러닝에서는  기계가  자동으로  학습하려는  데이터에서  특징을  추출하여  학습\n하게  됩니다 .\n이처럼  딥러닝과  머신러닝의  가장  큰  차이점은  바로  기계의  자가  학습  여부로  볼  수  있\n습니다 .\n따라서  딥러닝이란  기계가  자동으로  대규모  데이터에서  중요한  패턴  및  규칙을  학습\n하고 , 이를  토대로  의사결정이나  예측  등을  수행하는  기술로  정의내릴  수  있습니다 .\n인공신경망 (Artificial Neural Network, ANN)\n딥러닝에서  가장  기본이  되는  개념은  바로  신경망 (Neural Network) 입니다 .\n신경망이란  인간의  뇌가  가지는  생물학적  특성  중  뉴런의  연결  구조를  가리키며 , 이러"
  },
  {
    "question": "하이퍼 파라미터는  무엇인가요 ?",
    "answer": "wwww",
    "feedback": "1. 답변의 좋은 점:\n지원자가 하이퍼 파라미터에 대한 정확한 정의를 제시하려고 노력했다는 점이 좋습니다.\n\n2. 보완이 필요한 점:\n지원자가 실제로 하이퍼 파라미터에 대해 설명하지 않고 \"wwww\"라는 텍스트만 기입했기 때문에 보완이 필요합니다.\n\n3. 추가로 언급하면 좋을 내용:\n- 하이퍼 파라미터는 모델 학습 과정에 영향을 주는 매개변수로, 사용자가 직접 설정해야 하는 값들입니다.\n- 하이퍼 파라미터의 예시로는 학습률, 배치 크기, 은닉층의 개수 등이 있습니다.\n\n4. 개선된 답변 예시:\nA: 하이퍼 파라미터는 모델의 학습 과정에 영향을 주는 매개변수로, 사용자가 직접 설정해야 하는 값들을 말합니다. 예를 들어, 딥러닝에서는 학습률, 배치 크기, 은닉층의 개수 등이 하이퍼 파라미터에 해당됩니다.\n\n핵심 키워드: 하이퍼 파라미터, 모델 학습, 매개변수, 사용자 설정",
    "context": "하이퍼  파라미터는  정해진  최적의  값이  없습니다 . 휴리스틱한  방법이나  경험  법칙\n(rules of thumb) 에  의해  결정하는  경우가  많습니다 . (They can often be set using\nheuristics) 베이지안  옵티미제이션과  같이  자동으로  하이퍼  파라미터를  선택해주는\n라이브러리도  있긴  합니다 .\n파라미터와  하이퍼  파라미터를  구분하는  기준은  사용자가  직접  설정하느냐  아니냐입\n니다 . 사용자가  직접  설정하면  하이퍼  파라미터 , 모델  혹은  데이터에  의해  결정되면  파\n라미터입니다 .\n파라미터  vs 하이퍼  파라미터\n파라미터와  하이퍼  파라미터를  구분하는  기준은  사용자가  직접  설정하느냐  아니냐이\n다 . 사용자가  직접  설정하면  하이퍼  파라미터 , 모델  혹은  데이터에  의해  결정되면  파라\n미터이다 .\n딥러닝에서  하이퍼  파라미터는  학습률 , 배치  크기 , 은닉층의  개수  등이  있고 , 파라미터\n는  가중치 , 편향  등이  있다 .\n용어  정리\n선험적  지식 : 경험하지  않아도  알  수  있는  것을  말한다 .\n휴리스틱 : 체계적이면서  합리적인  판단이  굳이  필요하지  않은  상황에서  사람들이  빠\n르게  사용할  수  있도록 , 보다  용이하게  구성된  간편추론의  방법이다 . ' 대충  어림짐작하\n기 ', ' 눈대중으로  맞추기 ' 등의  방법을  일컫는다 .\n`Weight Initialization 방법에  대해  말해주세요 . 그리고  무엇을  많이  사용하나요 ?`\n## 답변  -type: answer\nA: 초기  가중치  설정  (weight initialization)\n딥러닝  학습에  있어  초기  가중치  설정은  매우  중요한  역활을  한다 . 가중치를  잘못  설정\n할  경우  기울기  소실  문제나  표현력의  한계를  갖는  등  여러  문제를  야기하게  된다 . 또한"
  },
  {
    "question": "NumPy 배열은  ( 중첩된 ) 파이썬  리스트에  비해  어떤  이점이  있나요 ?",
    "answer": "qqq",
    "feedback": "1. 답변의 좋은 점:\n지원자가 NumPy 배열과 파이썬 리스트의 차이를 설명하려고 노력했다는 점이 좋습니다.\n\n2. 보완이 필요한 점:\n지원자의 답변이 없어서 피드백을 제공하기 어렵습니다. 지원자가 이에 대한 지식이 없는 경우, 이를 솔직하게 인정하고 다른 관련된 주제에 대해 이야기할 수 있어야 합니다.\n\n3. 추가로 언급하면 좋을 내용:\nNumPy 배열은 파이썬 리스트에 비해 메모리 사용량이 적고 빠른 연산이 가능하며, 행렬과 선형대수 연산에 특화되어 있습니다. 또한 NumPy 배열은 벡터화 연산을 지원하여 코드를 간결하게 작성할 수 있습니다.\n\n4. 개선된 답변 예시:\nNumPy 배열은 파이썬 리스트에 비해 메모리 사용량이 적고 빠른 연산이 가능하며, 행렬과 선형대수 연산에 특화되어 있습니다. 또한 NumPy 배열은 벡터화 연산을 지원하여 코드를 간결하게 작성할 수 있습니다.\n\n핵심 키워드: NumPy 배열, 파이썬 리스트, 메모리, 빠른 연산, 행렬, 선형대수, 벡터화 연산",
    "context": "Py thon 관 련  면 접  Q&A\n35\nint_arr = list(map(int, input().split()))\n` 파이썬에서  Numpy 는  list 보다  좋나요 ?`\n파이썬의  리스트는  각  원소들의  값을  직접  사용하지  않고  원소들의  주소를  참조하는  방식을 \n사용하기  때문에  원소들의  타입이  정해지지  않아  편리하지만  메모리를  많이  사용하고  느리\n다는  단점이  있다 .\n반면 , 넘파이는  C 기반으로  구현되어  원소들의  타입을  미리  설정하여  메모리를  적게  사용하\n고  빠르다 . 또한  행렬과  선형대수에  편리한  함수들을  제공한다는  장점도  있다 .\n` 파이썬에서  GIL 은  무엇인가요 ?`\n멀티쓰레딩을  할  때 , 공유  자원에  대해  여러  쓰레드가  동시에  접근한다면  갱신된  내용이  유\n실되는  등의  문제가  발생할  수  있다 . 이를  막기  위해  파이썬은  GIL Global Interpreter \nLock) 을  통해  python interpreter 에  한  쓰레드만  접근하여  모든  자원을  사용할  수  있게 \n한다 .\n정확히는  멀티  쓰레드가  bytecode(=instruction) 한  라인씩을  들고  있기  때문에 , 한  쓰레\n드의  bytecode 한  줄에  대해서만  GIL 은  허용한다 .\n` CPython 이  Python 과  다른  점은  무엇인가요 ?`\n파이썬은  일반적으로  C 로  구현된  인터프리터  언어이다 . 일반적인  C 언어와  구분하기  위해 \n파이썬  구현체  C 를  CPython 이라고  부른다 .\nCPython 은  인터프리터이면서  컴파일러로  Python 코드를  C 가  아닌  bytecode 로  컴파\n일해주고 , 이를  interpreter(virtual machine) 가  실행하게  만든다 . 이러한  CPython 의 \ninterpreter 적인  특징이  파이썬을  차별되게  만들었다 ."
  },
  {
    "question": "람다 함수란  무엇인가요 ?",
    "answer": "rrr",
    "feedback": "1. 답변의 좋은 점:\n지원자가 람다 함수에 대한 답변을 제공하지 않아서 좋은 점이 없습니다.\n\n2. 보완이 필요한 점:\n지원자가 람다 함수에 대한 답변을 제공하지 않아서 보완이 필요합니다. 람다 함수에 대한 이해가 부족한 것으로 보입니다.\n\n3. 추가로 언급하면 좋을 내용:\n람다 함수는 익명 함수로, 한 줄로 간결하게 함수를 정의할 수 있는 기능입니다. 주로 간단한 연산이나 함수를 사용할 때 편리하게 사용할 수 있습니다.\n\n4. 개선된 답변 예시:\n람다 함수는 파이썬에서 익명 함수로, 한 줄로 간결하게 함수를 정의할 수 있는 기능입니다. 주로 간단한 연산이나 함수를 사용할 때 편리하게 사용할 수 있습니다. 람다 함수는 lambda 키워드를 사용하여 정의하며, 예를 들어 lambda x: x * 2와 같이 사용할 수 있습니다.\n\n핵심 키워드: 람다 함수, 익명 함수, 간결함, lambda",
    "context": "Py thon 관 련  면 접  Q&A\n8\n# Output: array(‘i’, [1, 2, 3, 4]) [1, ‘abc’, 1.2]\n` 파이썬에서  함수는  무엇인가요 ?`\n함수는  호출될  때만  실행되는  코드  블록이다 . Python 함수를  정의하기  위해  def 키워드가 \n사용된다 . 반복되는  부분을  함수로  만들어서  사용하면 , 똑같은  코드를  여러번  반복하여  쓰지 \n않아도  되고 , 프로그램의  흐름을  쉽게  파악할  수  있다는  장점이  있다 .\nCopy\ndef new_func():\n  print(\"Hi, Welcome to Edureka\")\nnew_func(); # 함수  호출\n# Output: Hi, Welcome to Edureka\n` init__ 이란  무엇인가요 ?`\n__init__는  파이썬에서  특별하게  약속된  메서드  가운데  하나로 , 초기화  메서드  혹은  생성자라\n고도  한다 . 이  메서드는  클래스의  새  개체 / 인스턴스가  생성될  때  메모리를  할당하기  위해  자\n동으로  호출되며 , 그  객체가  갖게  될  여러  가지  성질을  정해준다 . 모든  클래스에는  __init__메\n서드가  있다 .\nCopy\nclass Employee:\n  def __init__(self, name, age,salary):\n    self.name = name\n    self.age = age\n    self.salary = 20000\nE1 = Employee(\"XYZ\", 23, 20000)\n# E1 은  Employee 클래스의  객체\n# __init__ 는  E1 에  메모리를  할당함\nprint(E1.name)"
  },
  {
    "question": "윈도우에 파이썬을  설치하고  경로  변수를  설정하는  방법은  무엇인가요 ?",
    "answer": "eee",
    "feedback": "1. 답변의 좋은 점:\n- 지원자가 질문에 대한 답변을 제공하지 않고 있습니다.\n\n2. 보완이 필요한 점:\n- 지원자는 질문에 대한 답변을 제공하지 않았기 때문에, 이에 대한 보완이 필요합니다.\n\n3. 추가로 언급하면 좋을 내용:\n- 윈도우에 파이썬을 설치하고 경로 변수를 설정하는 방법은 매우 중요한 과정입니다. 이를 설명하고 싶은 경우, 환경 변수 설정 및 시스템 경로에 대한 이해가 필요합니다.\n\n4. 개선된 답변 예시:\n- 윈도우에 파이썬을 설치하고 경로 변수를 설정하는 방법은 다음과 같습니다. 먼저, 파이썬을 다운로드하고 설치한 후, 시스템의 환경 변수에 파이썬 실행 파일이 있는 디렉토리를 추가해야 합니다. 이를 통해 파이썬을 어디서든 실행할 수 있게 됩니다.\n\n핵심 키워드: 환경 변수, 시스템 경로, 파이썬 설치.",
    "context": "Py thon 관 련  면 접  Q&A\n5\n.py 파일이  속한  디렉터리의  절대  경로\nPYTHONPATH 환경  변수\n기타  기본  경로\n아래의  코드를  통해서  sys.path 를  직접  확인할  수  있다 .\nCopy\nimport sys\nprint(sys.path)\n` 파이썬  모듈이란  무엇인가요 ? 파이썬에서  일반적으로  사용되는  내장  모듈의 \n이름은  무엇인가요 ?` \n모듈이란  Python 코드를  포함하는  파일로써 , 함수나  변수  또는  클래스를  모아  놓은  파일이\n다 . 모듈은  다른  파이썬  프로그램에서  불러와  사용할  수  있게끔  만든  파이썬  파일이라고도 \n할  수  있다 . 실행  가능한  코드를  포함하는 , 파이썬  확장자  .py 로  만든  파이썬  파일은  모두  모\n듈이다 . 모듈을  사용하면 , 다른  코드에  적용하기가  쉬워지므로  이식성이  좋아진다 . \n자주  사용되는  빌트인  모듈 (built-in module) 의  예시는  다음과  같다 .\nos\nsys\nmath\nrandom\ndatetime\nJSON\n` 파이썬에서  지역  변수와  전역  변수는  무엇인가요 ?`\n* 전역  변수 (Global Variable)** 는  함수  외부  또는  전역  공간에  선언된  변수이다 . 프로\n그램의  모든  함수에서  전역변수에  접근할  수  있다 .\n* 로컬  변수 (Local Variable)** 는  함수  내부에  선언된  변수를  말한다 . 로컬  변수는  전역 \n공간이  아닌  로컬  공간에  있다 .\nCopy"
  },
  {
    "question": "파이썬 경로란  무엇인가요 ?",
    "answer": "qqq",
    "feedback": "1. 답변의 좋은 점:\n지원자가 파이썬 경로에 대한 개념을 어느 정도 이해하고 있다는 점이 좋습니다.\n\n2. 보완이 필요한 점:\n지원자의 답변이 너무 간단하고 부정확합니다. 파이썬 경로에 대한 개념을 더 자세히 설명하거나 예시를 들어서 설명하는 것이 좋을 것입니다.\n\n3. 추가로 언급하면 좋을 내용:\n- PYTHONPATH 환경 변수가 모듈을 import 할 때 사용되는 환경변수임을 강조할 수 있습니다.\n- sys.path에 경로를 추가하여 파이썬 코드 내부뿐만 아니라 외부에서도 sys.path를 조작할 수 있다는 점을 언급할 수 있습니다.\n\n4. 개선된 답변 예시:\n파이썬 경로란 PYTHONPATH 환경 변수를 의미합니다. 모듈을 import 할 때 사용되는 환경변수로, PYTHONPATH를 조회하여 가져온 모듈이 디렉토리에 있는지 확인합니다. PYTHONPATH 환경 변수에 경로를 추가하면, 파이썬은 이 경로들을 sys.path에 추가하게 됩니다. 이를 통해 파이썬 코드 내부뿐만 아니라 외부에서도 sys.path를 조작할 수 있습니다. PYTHONPATH에는 sys.path에 추가할 여러 경로들이 들어가며, 리눅스와 윈도우에서 경로를 구분하는 방식이 다릅니다.\n\n핵심 키워드: PYTHONPATH, sys.path, 모듈 import, 환경변수, 디렉토리, 경로 설정",
    "context": "Py thon 관 련  면 접  Q&A\n4\n파이썬  네임스페이스의  특징\n네임스페이스는  딕셔너리  형태로  구현된다 .\n모든  이름  자체는  문자열로  되어있고  각각은  해당  네임스페이스의  범위에서  실제  객체\n를  가리킨다 .\n이름과  실제  객체  사이의  매핑은  가변적 (Mutable) 이므로  런타임동안  새로운  이름이  추\n가될  수  있다 .\n빌트인  네임스페이스는  함부로  추가하거나  삭제할  수  없다 .\n파이썬  네임스페이스의  3 가지  분류\n빌트인  네임스페이스 (build-in namespace): 기본  내장  함수  및  기본  예외들의  이름\n들이  소속된다 . 파이썬으로  작성된  모든  코드  범위가  포함된다 .\n전역  네임스페이스 (global namespace): 모듈별로  존재하며 , 모듈  전체에서  통용될 \n수  있는  이름들이  소속된다 .\n지역  네임스페이스 (local namespace): 함수  및  메서드  별로  존재하며 , 함수  내의  지\n역  변수들의  이름들이  소속된다 .\n` 파이썬  경로란  무엇인가요 ?`\n모듈을  import 할  때  사용되는  환경변수이다 . 모듈을  import 할  때마다  PYTONPATH 를  조\n회하여  가져온  모듈이  디렉토리에  있는지  확인한다 . 인터프리터는  이를  사용하여  로드할  모\n듈을  결정한다 .\nPYTHONPATH 환경  변수에  경로를  추가하면 , 파이썬은  이  경로들을  sys.path 에  추가한\n다 . 이를  통해  파이썬  코드  내부에서  뿐만  아니라  파이썬  코드  밖에서도  sys.path 를  조작할 \n수  있다 . PYTHONPATH 에는  sys.path 에  추가할  여러  경로들이  들어간다 . 리눅스에서는 \n/foo:/bar 처럼  : 로  두  경로를  구분하고 , 윈도우에서는  /foo;/bar 처럼  ; 로  두  경로를  구분"
  }
]